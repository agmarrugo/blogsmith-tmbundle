<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/ruby
SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/ui'
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/osx/plist'
require SUPPORT + '/lib/exit_codes'
require 'net/http'
require 'erb'
require 'rexml/document'

input = STDIN.read
blogsite = "itunes.apple.com"
offset = 0
answer = TextMate::UI.request_string(:title =&gt; "Enter keywords",:prompt =&gt; "Find iPhone apps with keywords:",:default =&gt; input)
TextMate.exit_discard unless answer
query = answer + " title:\"on the App Store\" site:#{blogsite}"

def do_search(offset,phrase)
  escapedUrl = "http://api.search.live.net/xml.aspx?Appid=6B9E3A4B9F0D8F963A24815A0317BF1DCA3B0E9A&amp;query=#{e_url(phrase)}&amp;sources=web&amp;web.offset=#{offset}"

  xml_data = Net::HTTP.get_response(URI.parse(escapedUrl)).body
  doc = REXML::Document.new(xml_data)
  bings = []
  doc.elements.each('SearchResponse/web:Web/web:Results/web:WebResult') do |result|
		url = result.elements['web:Url'].text
		if url =~ /\/app\//
			title = result.elements['web:Title'].text.gsub('"','&amp;raquo;').gsub("'",'&amp;rsquo;').gsub(/&lt;\/?b&gt;/,'')
			title = title[0..50]+"…" if title.length &gt; 50	
	    begin
	      bings &lt;&lt; {
	        'title' =&gt; title,
	        'url' =&gt; url
	      }
	    rescue
	      TextMate.exit_show_tool_tip "Error in returned data"
	    end
		end
  end
  bings &lt;&lt; {
    'title' =&gt; 'More results…',
    'url' =&gt; ''
  } unless bings.empty?

  TextMate.exit_show_tool_tip "No matches" if bings.empty?

  plist = { 'menuItems' =&gt; bings }.to_plist
  res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
  unless res.has_key? 'selectedMenuItem'
	if ENV['TM_CURRENT_LINE'] =~ /^\[/
	    TextMate.exit_insert_text "]: "
	else
		TextMate.exit_discard
	end
  end
  if res['selectedMenuItem']['title'] == "More results…"
    offset += 10
    do_search(offset,phrase)
  else
    return res
  end
end

res = do_search(offset,query)

url = res['selectedMenuItem']['url']
title = res['selectedMenuItem']['title']
price = ""
if url =~ /^http:\/\/itunes.apple.com\/[^\/]+\/app\/.+$/
  source = Net::HTTP.get_response(URI.parse(url.strip)).body
  price = source.match(/&lt;div class="price"&gt;([^&lt;]+)&lt;\/div&gt;/)[1] unless source.nil?
end

if !(ENV['TM_SCOPE'].scan(/markdown/).empty?) &amp;&amp; ENV['TM_CURRENT_LINE'] =~ /^(\s+|#{input})?$/
  # input = "itunes " + answer.chomp.gsub(/\s+/,"_")
  input = answer
  print ERB.new(ENV['TM_APP_REF_LINK_FORMAT']).result
else
  input = res if input.empty?
  print ERB.new(ENV['TM_APP_BLINK_FORMAT']).result
end
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^@w</string>
	<key>name</key>
	<string>Link iTunes App (web)</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html, text.html.markdown, text.html.markdown.multimarkdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext</string>
	<key>uuid</key>
	<string>59B540E7-5B7F-4DDA-B932-1D0E4F80A5FD</string>
</dict>
</plist>
