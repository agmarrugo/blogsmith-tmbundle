<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>79741B2E-271D-4CBC-A61A-380C83D36863</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rjcode -Ku

SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/osx/plist'
require SUPPORT + '/lib/exit_codes'
require SUPPORT + '/lib/progress'
require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/keyword_density"
require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/yahoo"
load "#{ENV['TM_BUNDLE_SUPPORT']}/lib/utilities.rb"
require 'date'


$line = ENV['TM_CURRENT_LINE']
$text = STDIN.read

def readwords(wordfile)
  if File.exist?(File.expand_path("~/Library/Preferences/com.macromates.textmate.blogsmith.#{wordfile}"))
    wordlist = IO.readlines(File.expand_path("~/Library/Preferences/com.macromates.textmate.blogsmith.#{wordfile}"))
  else
    wordlist = IO.readlines("#{ENV['TM_BUNDLE_SUPPORT']}/lib/#{wordfile}")
  end
  return wordlist.map {|aword| aword = aword.strip }
end

def update_whitelist(tags,write)
  lctags = $goodtags.map {|x| x.downcase }
  keeptags = tags.clone
  keeptags.delete_if {|x| lctags.include? x.downcase }
  $goodtags.each {|x|
    tags.each_index {|y| tags[y] = x if x.downcase == tags[y].downcase }
  }
  newtags = $goodtags + keeptags
  newtags.sort! do |a,b|
    a.upcase &lt;=&gt; b.upcase
  end
if write
  f = File.new(File.expand_path("~/Library/Preferences/com.macromates.textmate.blogsmith.whitelist.txt"),  "w+")
  f.print newtags.join("\n")
  f.close
end
  return tags
end

$skipwords = readwords("skipwords.txt")
$goodtags = readwords("whitelist.txt")
$alwaystags = readwords("alwaystags.txt")

def e_sh(str)
  str.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
end

def strip_html(str)
  str.strip!
  tag_pat = %r,[\[&lt;](?:(?:/?)|(?:\s*)).*?[&gt;\]],m
  str.gsub(tag_pat, '')
end

def strip_headers(str)
  str.strip!
  str.gsub!(/&lt;!--\s?more\s?--&gt;/,'')
  str.gsub(/^[^ \[]+\: [^\n]+/, '')
end

def url_escape(string)
  string.gsub(/([^a-zA-Z0-9_.-]+)/n) do
    '%' + $1.unpack('H2' * $1.size).join('%').upcase
  end
end

$text = strip_headers($text)

if !(ENV['TM_SCOPE'].scan(/markdown/).empty?)
  $text = %x{echo #{e_sh $text}|"#{ENV['TM_SUPPORT_PATH']}/bin/Markdown.pl"}
    end

    TextMate.exit_show_tool_tip "Error, no text returned" if $text.to_s.empty?

    $text = strip_html($text)

    TextMate.call_with_progress(:title =&gt;'Retrieving Tag Suggestions',
      :summary =&gt; 'Contacting Yahoo...',
      :indeterminate =&gt; false,
    :cancel =&gt; lambda {TextMate.exit_discard} ) do |dialog|
      dialog.parameters = {'summary' =&gt; 'Getting Yahoo Tags','progressValue' =&gt; 50 }
      words = $text.gsub(/[\/\\]_/,' ').gsub(/[^A-Za-z0-9\s]/,'').split
      words.delete_if{|word| word =~ $skipwords }
      query = words.join('+')

      yahoo = TagAnalysis.new('TM_AUTOSUGGEST', query[0..8000], 'all', 50)

      ysorted = nil
      unless yahoo.parse_analysis.nil? || yahoo.parse_analysis.empty?
        ysorted = yahoo.parse_analysis.sort do |a,b|
          a.upcase &lt;=&gt; b.upcase
        end
      end

      tags = []

      $goodtags.each {|tag|
        tags.push(tag)
      }

      dialog.parameters = {'summary' =&gt; 'Processing','progressValue' =&gt; 90 }
      density = KeywordDensity.new($goodtags,File.expand_path("~/Library/Preferences/com.macromates.textmate.blogsmith.skipwords.txt"))

      density.get_keyword_density($text)
      words = density.words_count


      matches = []

      words.each {|phrase,count| matches.push(phrase.join(' ')) if count &gt; 3 || (count &gt; 2 &amp;&amp; phrase.length &gt; 1)}
      $alwaystags.each {|tag| matches.push(tag) }
      ysorted.each {|tag| matches.push(tag) } unless ysorted.nil?
      TextMate.exit_show_tool_tip "No tag matches in text" if matches.nil? || matches.empty?
      sorted = matches.sort do |a,b|
        a.upcase &lt;=&gt; b.upcase
      end

      sorted = sorted.map{|x| x.downcase}.uniq

      $tarray = []
      sorted.each { |tag|
        $tarray &lt;&lt; {
          'title' =&gt; tag,
          'tag' =&gt; tag
        }
      }
      dialog.parameters = {'summary' =&gt; 'Complete!','progressValue' =&gt; 100 }
    end
    plist = { 'tags' =&gt; $tarray }.to_plist
    res = OSX::PropertyList::load(`#{e_sh DIALOG} -mp #{e_sh plist} select_tags4`)

      TextMate.exit_insert_text "tags: " if res['returnButton'] == "Cancel"
      returnedtags = res['result']['returnArgument']
	unless $line.empty?
		existing_tags = $line.split(';')
		returnedtags.delete_if {|tag| existing_tags.include? tag}
	end
	write = res['whitelist'] == 1 ? true : false
      tags = update_whitelist(returnedtags,write)
      tagslist = ''
      tags.map {|tag|
        tagslist += ";" unless tagslist == ''
        tagslist += tag.gsub(/\s/,"-") + ";" if tag =~ /\w+\s\w+/
      tagslist += tag }
      b = $line =~ /^[Tt]ags\:(.*)?/ ? '' : "tags: "
      o = "#{tagslist.chomp}"
	o += ";" unless $line.empty? || o == ''
	print "#{b}$0${1:#{o}}"</string>
	<key>input</key>
	<string>document</string>
	<key>name</key>
	<string>YahooTag</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html.markdown, text.html.markdown.multimarkdown</string>
	<key>tabTrigger</key>
	<string>tags: </string>
	<key>uuid</key>
	<string>AA7F8A0E-9A05-4F0C-A341-661747B5C32F</string>
</dict>
</plist>
