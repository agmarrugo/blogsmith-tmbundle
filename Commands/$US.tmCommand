<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require "#{ENV['TM_SUPPORT_PATH']}/lib/progress"
require "#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes"
require "#{ENV['TM_SUPPORT_PATH']}/lib/ui"
require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
require 'net/http'
require 'date'
require 'erb'

input = STDIN.read

def ts( st )
  mynum = st.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
  dec = mynum.split('.')
  mynum = dec[0].to_s + '.' + dec[1].to_s.ljust(2, '0')[0,2] if dec[1]
  mynum
end
def shift_dec(int)
	mynum = int.to_f * 0.01
	mynum
end

class Float
  def round_to(x)
    (self * 10**x).round.to_f / 10**x
  end

  def ceil_to(x)
    (self * 10**x).ceil.to_f / 10**x
  end

  def floor_to(x)
    (self * 10**x).floor.to_f / 10**x
  end
end

def pad_num(x)
	if x.to_s.split('.')[1].length == 1
		return (x.to_s + '0')
	else
		return x
	end
end

def get_qty(input)
	input.scan(/([\d\.]+)/) {|num|
		TextMate.exit_show_tool_tip "Please select a numeric quantity (Euros)" if num == nil
		return num[0]
	}
end

if input =~ /[\d\.]+\s?(€|Eu(ro)?)/i
	TextMate.exit_show_tool_tip "Line contains an amount in Euros, please select it separately for conversion" if input !~ /^[\d\.]+\s?(€|Eu(ros?)?)$/i
	date = Time.now - (60*60*24)
	day = date.day
	month = date.month
	year = date.year
	rate = 0

	TextMate.call_with_progress(:title =&gt; "Contacting Bank of Italy", :message =&gt; "Retrieving Exchange Rate") do
		response = Net::HTTP.get_response(URI.parse("http://uif.bancaditalia.it/UICFEWebroot/QueryOneDateAllCur?lang=en&amp;rate=0&amp;initDay=#{day}&amp;initMonth=#{month}&amp;initYear=#{year}&amp;refCur=euro&amp;R1=csv"))
		if response.body =~ /^UNITED STATES/
			response.body.split("\n").each {|line|
				rows = line.split(',')
				if rows[2].to_s.strip == "USD"
					rate = rows[4].to_f
					num = get_qty(input).to_i
					print "$#{pad_num(num*rate.round_to(2))}US"
				end
			}
		end
	end
	TextMate::UI.tool_tip("&lt;p style=\"background:#666; color:white; -webkit-border-radius: 15px; padding:1em;\"&gt;Exchange rate (Euro:USD) = #{rate}&lt;br /&gt;&lt;br /&gt;&lt;span style=\"font-size:.8em\"&gt;Converting to USD&lt;/span&gt;&lt;/p&gt;", {:transparent =&gt; true, :format =&gt; :html})
  exit
elsif input.match(/^[\%\$\d\*\/\+\-,\. \(\)]+$/)
	num = ts(eval(input.gsub(/[\$\,]/,'').gsub(/(^|[^\d])(\.\d+)/,'\10\2').gsub(/([\d\.]+)(?:\s+?)?([+-])(?:\s+?)?([\d\.]+)%([^\d]|$)/,'\1\2(\1*(\3.to_f * 0.01))\4')).to_s)
	print ERB.new(ENV['TM_MONEY_FORMAT']).result
else
	if input =~ /\$?[\d\,\.]{2,}/
		matches = input.scan(/(\$)?([\d\,\.]{2,})([A-Z]+)?/m)
		matches.reverse.each {|pre,digits,post|
			unless post == 'US'
				num = ts(digits)
				input = input.sub(/\$?#{digits}#{post}/,ERB.new(ENV['TM_MONEY_FORMAT']).result)
				TextMate.exit_replace_text input
			end
		}
		print input
	elsif input =~ /\$(\d)\s/
		num = $1
		input = input.sub(/\$\d/,ERB.new(ENV['TM_MONEY_FORMAT']).result)
		TextMate.exit_replace_text input
	else
		TextMate.exit_show_tool_tip "I'm sorry Dave, I'm not finding anything to work with"
	end
end</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>~$</string>
	<key>name</key>
	<string>$US</string>
	<key>output</key>
	<string>replaceSelectedText</string>
	<key>scope</key>
	<string>text.html.markdown, text.html.markdown.multimarkdown,text.html</string>
	<key>uuid</key>
	<string>F3A789D0-EE7D-4E15-8230-C4101B3B4934</string>
</dict>
</plist>
