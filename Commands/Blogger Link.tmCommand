<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/ruby
SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/ui'
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/osx/plist'
require SUPPORT + '/lib/exit_codes'
require 'erb'
require 'cgi'
require 'net/http'
require 'rexml/document'

blogger = STDIN.read
input = blogger
blogsite = ENV['BLOG_SITE'] ? ENV['BLOG_SITE'] : "www.tuaw.com"
blogsite = "www." + blogsite unless blogsite =~ /^www\./

query = input + " site:#{blogsite}/editor"

escapedUrl = "http://api.search.live.net/xml.aspx?Appid=6B9E3A4B9F0D8F963A24815A0317BF1DCA3B0E9A&amp;query=#{e_url(query)}&amp;sources=web&amp;web.offset=0"

xml_data = Net::HTTP.get_response(URI.parse(escapedUrl)).body
doc = REXML::Document.new(xml_data)
bings = []
doc.elements.each('SearchResponse/web:Web/web:Results/web:WebResult') do |result|
  begin
    bings &lt;&lt; {
      'title' =&gt; result.elements['web:Title'].text.gsub('"','&amp;raquo;').gsub("'",'&amp;rsquo;'),
      'url' =&gt; result.elements['web:Url'].text
    }
  rescue
    TextMate.exit_show_tool_tip "Error in returned data"
  end
end

TextMate.exit_show_tool_tip "Blogger not found, check your spelling" if bings.empty?

ysuggest = []
bings.each {|result|
	if result['url'].gsub(/-/,' ') =~ /#{input}/i &amp;&amp; result['url'] =~ /^http:\/\/#{blogsite}\/editor\/[^\/]+\/?$/
		blogger_name = result['url'].match(/\/editor\/([^\/]+)\/?/)[1].chomp.gsub(/-/,' ').gsub(/\b([a-z])/i) {|w| w.capitalize } 
	ysuggest &lt;&lt; { 
	      'title' =&gt; blogger_name,
	      'url' =&gt; result['url']
		}
	end
}
sorted = ysuggest.sort do |a,b| 
	a['title'] &lt;=&gt; b['title']
end
sorted.uniq!
TextMate.exit_show_tool_tip "No matches found" if sorted.empty?
if sorted.length &gt; 1
plist = { 'menuItems' =&gt; sorted }.to_plist

res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
TextMate.exit_discard unless res.has_key? 'selectedMenuItem'
url = res['selectedMenuItem']['url']
url += "/" unless url =~ /\/$/
input = res['selectedMenuItem']['title']
else
	url = sorted[0]['url']
	url += "/" unless url =~ /\/$/
	input = sorted[0]['title']
end

# res = Net::HTTP.get_response(URI.parse(url)).body
# name_match = res.match(/class="bloggername"&gt;([^&lt;]+)&lt;/)
# name_match = res.match(/class="byline"&gt;by &lt;strong&gt;&lt;a href="[^"]+"&gt;([^&lt;]+)&lt;\/a&gt;/) if name_match.nil?
# url += "/" unless url =~ /\/$/

if (!(ENV['TM_SCOPE'].scan(/markdown/).empty?) &amp;&amp; ENV['TM_CURRENT_LINE'] =~ /^(\s+)?$/) || ENV['TM_CURRENT_LINE'] =~ /^(#{blogger})?(\s+)?$/
	print ERB.new(ENV['TM_REF_LINK_FORMAT']).result
else
    print ERB.new(ENV['TM_BLINK_FORMAT']).result
end</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^@w</string>
	<key>name</key>
	<string>Blogger Link</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html, text.html.markdown, text.html.markdown.multimarkdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext</string>
	<key>uuid</key>
	<string>DB2BB6A6-B3B4-4AE6-B29A-9EDF8C7D52D7</string>
</dict>
</plist>
