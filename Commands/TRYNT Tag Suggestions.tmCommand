<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rjcode -Ku
SUPPORT = ENV['TM_SUPPORT_PATH']
BUNDLESUPPORT = ENV['TM_BUNDLE_SUPPORT']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/exit_codes'
require SUPPORT + '/lib/ui'
require 'net/http'
require 'rexml/document'
require "#{BUNDLESUPPORT}/lib/cooldialog.rb"

$line = ENV['TM_CURRENT_LINE']
$text = STDIN.read

def e_sh(str)
	str.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
end

def strip_html(str)
   str.strip!
   tag_pat = %r,[\[&lt;](?:(?:/?)|(?:\s*)).*?[&gt;\]],m
   str.gsub(tag_pat, '')
end

def get_title(str)
	str.match(/[Tt]itle\:\s?([^\n]+)/)[1].strip
end

def strip_headers(str)
   str.strip!
   str.gsub!(/&lt;!--\s?more\s?--&gt;/,'')
   str.gsub!(/^[^ ]+\: [^\n]+/, '')
   str.gsub(/#{$line}/,'')
end

def url_escape(string)
	string.gsub(/([^a-zA-Z0-9_.-]+)/n) do
		'%' + $1.unpack('H2' * $1.size).join('%').upcase
	end
end

$title = get_title($text)
$text = strip_headers($text)

if !(ENV['TM_SCOPE'].scan(/markdown/).empty?)
	$text = %x{echo #{e_sh $text}|"#{ENV['TM_SUPPORT_PATH']}/bin/Markdown.pl"}
end

TextMate.exit_show_tool_tip "Error, no text returned" if $text.to_s.empty?

$text = strip_html($text).gsub(/\b\/\b/,' ')

response = TextMate::UI.request_string(:title =&gt; "Enter a query string",:prompt =&gt; "Enter a string to assist the search:",:default =&gt; $title)
TextMate.exit_discard unless response

url = "http://www.trynt.com/term-extraction-api/v1/"
uri = URI.parse(url)
req = Net::HTTP::Post.new(url)
req.set_form_data({
  'context' =&gt; $text,
  'query' =&gt; response
  })

res = Net::HTTP.new(uri.host, uri.port).start { |http| http.request(req) }
doc = REXML::Document.new(res.body)
answer = nil

sorted = []
doc.elements.each('trynt/result') do |result|
	tags = result.text.split(/\n/)
	if tags.length &gt; 1
		tags.each { |tag|	sorted.push(tag) }
	else
		sorted.push(tags[0])
	end
end
sorted = sorted.uniq.sort

tarray = []
sorted.each {|tag|
	tarray &lt;&lt; {
		'title' =&gt; tag,
		'tag' =&gt; tag
	}
}

plist = { 'tags' =&gt; tarray }.to_plist
res = OSX::PropertyList::load(`#{e_sh DIALOG} -mp #{e_sh plist} select_tags4`)
TextMate.exit_insert_text "tags: " if res['returnButton'] == "Cancel"
returnedtags = res['result']['returnArgument']
tags = update_whitelist(returnedtags)
tagslist = ''
tags.map {|tag|
	tagslist += ";" unless tagslist == ''
	tagslist += tag 
}  
print "tags: " unless $line =~ /^[Tt]ags\:(.*)?/
print "#{tagslist.chomp}"
TextMate.exit_show_tool_tip "No results" if tags.empty?</string>
	<key>fallbackInput</key>
	<string>none</string>
	<key>input</key>
	<string>document</string>
	<key>name</key>
	<string>TRYNT Tag Suggestions</string>
	<key>output</key>
	<string>openAsNewDocument</string>
	<key>scope</key>
	<string>text.html, text.html.markdown, text.html.markdown.multimarkdown</string>
	<key>uuid</key>
	<string>72891E1C-4097-424B-AD0B-3E46A4E20ECC</string>
</dict>
</plist>
