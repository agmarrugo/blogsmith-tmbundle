<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require "#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes"
require "#{ENV['TM_SUPPORT_PATH']}/lib/ui"
require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/cooldialog.rb"
$caterror = ""

# To override the command's web root detection, add a shell variable in TextMate's 
# advanced preferences called WEB_ROOT 
# Set the value of WEB_ROOT to an existing directory where the blogsmith.js file can be stored
# if you set/change this, you'll need to modify the bookmarklet accordingly
web_root_override = ENV['WEB_ROOT'] ? ENV['WEB_ROOT'] : ''

if web_root_override.empty?
	begin
		f = File.new("/etc/apache2/httpd.conf",'r')
		match = f.read.match /^DocumentRoot "([^"]+)"/
		WEB_ROOT = "#{match[1]}"
	rescue
		WEB_ROOT = '/Library/WebServer/Documents'
	end
else
	WEB_ROOT = web_root_override
end

def fix_tag_format(input)
  tagline = input.match(/[tT]ags:(.*)$/)[0]
  return input.gsub(tagline,'tags: ') if tagline =~ /[Tt]ags: ?$/
  return input.gsub(tagline,tagline.gsub(/,\s?/,";").strip.gsub(/;$/,'').gsub(/[Tt]ags:([^ ])?/,"tags: \\1"))
end

def e_sh(str)
	str.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
end

def url_escape(string)
	string.gsub(/([^a-zA-Z0-9_.-]+)/n) do
		'%' + $1.unpack('H2' * $1.size).join('%').upcase
	end
end

def url_unescape(string)
	string.gsub(/((?:%[0-9a-fA-F]{2})+)/n) do
		[$1.delete('%')].pack('H*')
	end
end

def get_headers(html)
	headers = []
	html.scan(/^(doctype|title|link|categories|tags|appid|excerpt)\: ([^\n]+)?/im) { |match|
	  if match[0] =~ /[Cc]ategories/ &amp;&amp; match[1] =~ /[^ ;0-9]/
	    $caterror += "WARNING: Categories were entered in the wrong format. They should be numeric and separated by semicolons, as created by the Categories command.\n\n"
    elsif match[1] =~ /^[\s\n]*$/ || match[1].nil?
      $caterror += "WARNING: No #{match[0].downcase} set\n\n"
    else
      headers &lt;&lt; { 'title' =&gt; match[0], 'value' =&gt; match[1].strip } unless match[0] == 'doctype'
    end
	}
	['title:','link:','categories:','tags:','appid:','excerpt:'].each { |header|
	  $caterror += %Q{WARNING: No "#{header}" header\n\n} if html.scan(/#{header}/i)[0].nil?
	}
	headers
end

html = fix_tag_format(STDIN.read)
headers = get_headers(html)
html.gsub!(/^[A-Za-z]+\: ([^\n]+)?\n+/,"")
if html =~ /&lt;!--\s?end\s?--&gt;/i
  html = html.split(/&lt;!--\s?end\s?--&gt;/i)[0]
end
html = html.gsub("\342\200\230", "'").gsub("\342\200\231", "'").gsub("\342\200\234", '"').gsub("\342\200\235", '"')
html = html.gsub(/^&lt;\d+&gt; .*$/,'').gsub(/&lt;\d+&gt;/,'')
if !(ENV['TM_SCOPE'].scan(/markdown/).empty?)
	html = %x{echo #{e_sh html}|"#{ENV['TM_SUPPORT_PATH']}/bin/Markdown.pl"}
end
html.gsub!(/(&lt;div class="removeme"[^&gt;]+&gt;)?(.*)?(&lt;p([^&gt;]+)?&gt;(.*)?)?&lt;img class="removeme"[^&gt;]+&gt;(&lt;\/p&gt;)?(&lt;\/div&gt;)?/,'')
# remove common unicode punctuation
html.gsub!(/…/,'...')
html.gsub!(/—/,'--')
html.gsub!(/[“”]/,'"')
html.gsub!(/[‘’]/,'\'')

unless html.to_s.empty?
begin
	o = "(function doit() {"
	o += "var errormsg=false,link=false,title=false,categories=false,tags=false,content=false,continued=false,appid=false,excerpt=false;"
	headers.each {|h| o += %Q{#{h['title'].to_s}='#{url_escape(h['value'].to_s)}';} }
	o += %Q^errormsg="#{url_escape($caterror)}";^ unless $caterror == ""
	content = nil
	continued = nil
	if html =~ /(.*)&lt;!--\s?more\s?--&gt;(.*)/m
		o += %Q{content="#{url_escape($1)}";continued="#{url_escape($2)}";}
	else
		o += %Q{content="#{url_escape(html)}";}
	end
	o += %Q^if(categories){cats=unescape(categories).split(";");^
	o += %Q^for(i=0;i&lt;cats.length;i++){try{addCat(document.getElementById(cats[i]));}catch(e){console.log(e);}}}^
	o += %Q^if(title)blogsmith.setTitle(unescape(title));^
	o += %Q^if(tags){var tagarray=unescape(tags).split(';');for(i=0;i&lt;tagarray.length;i++){blogsmith.setTags(tagarray[i]);}};^
	o += %Q^if(link)blogsmith.setLinks(unescape(link));^
  o += %Q^if(typeof FCKeditorAPI!='undefined'){^
	o += %Q^var oEditor1=FCKeditorAPI.GetInstance("postcontent");oEditor1.SetHTML(unescape(content));^
	o += %Q^if(continued){var oEditor2=FCKeditorAPI.GetInstance("postcontinued");oEditor2.SetHTML(unescape(continued));}^
	o += %Q^}else{CKEDITOR.instances.postcontent.setData(unescape(content));^
	o += %Q^if(continued){CKEDITOR.instances.postcontinued.setData(unescape(continued));}}^
	o += %Q^if(appid)blogsmith.addMetaData('post_apptapID',unescape(appid));^
	o += %Q^if(excerpt)blogsmith.addMetaData('post_excerpt',unescape(excerpt));^
	o += %Q^buildSlug();pageUpdated();^
  o += %Q^if(errormsg){alert(unescape(errormsg));}^
	o += "})();"
	jsfile = File.new(File.expand_path("#{WEB_ROOT}/blogsmith.js"),'w')
	jsfile.puts o
	jsfile.close
	output = "Javascript file saved to: "
	output += File.expand_path("#{WEB_ROOT}/blogsmith.js")
	output += "\n#{$caterror.gsub(/WARNING:/,"&lt;span style='color:red;font-weight:bold'&gt;WARNING:&lt;/span&gt;")}" unless $caterror == ""
	TextMate::CoolDialog.cool_tool_tip(output)
	exit
rescue SystemCallError
	TextMate::CoolDialog.cool_tool_tip("IO failed: " + $!)
	raise
end
end</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>^@w</string>
	<key>name</key>
	<string>Copy for Posting (Autofill)</string>
	<key>output</key>
	<string>afterSelectedText</string>
	<key>scope</key>
	<string>text.html.markdown, text.html.markdown.multimarkdown, text.html</string>
	<key>uuid</key>
	<string>09259730-9B8E-4A90-A0FD-0A551FCEECE5</string>
</dict>
</plist>
