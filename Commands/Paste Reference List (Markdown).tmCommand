<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
SUPPORT = ENV['TM_SUPPORT_PATH']
require SUPPORT + '/lib/exit_codes'
require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/linkage.rb"

clipboard = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
input = STDIN.read

if input.empty? 
	links = clipboard.scan /(?:\[([^\]]+)\]\: )?(https?:\/\/[^ \n"]+)/m
else
	links = input.scan /(?:\[([^\]]+)\]\: )?(https?:\/\/[^ \n"]+)/m
end

if links.empty? &amp;&amp; input.empty? then
	TextMate::CoolDialog.cool_tool_tip('No links found',true)
elsif input.empty? &amp;&amp; ! ENV['TM_CURRENT_LINE'].empty?
	TextMate::CoolDialog.cool_tool_tip("I wouldn't do that in the middle of a paragraphâ€¦",true)
elsif links.empty?
	if clipboard =~ /(?:\[([^\]]+)\]\: )?(https?:\/\/[^ \n"]+)/m
		input,url = Linkage.new.link_word(input)
		if input.empty? &amp;&amp; !(ENV['TM_SCOPE'].scan(/markdown/).empty?) &amp;&amp; ENV['TM_CURRENT_LINE'] =~ /^(\s+)?$/
		  puts "[${1:title}]: ${2:#{url}}"
		elsif !(ENV['TM_SCOPE'].scan(/markdown/).empty?) &amp;&amp; ENV['TM_CURRENT_LINE'] =~ /^(\s+|#{input})?$/
		  print ERB.new(ENV['TM_REF_LINK_FORMAT']).result
		else
		  print ERB.new(ENV['TM_BLINK_FORMAT']).result
		end
	else
		if links.empty?
			TextMate::CoolDialog.cool_tool_tip("No links found",true) 
		end
	end
else
norepeat = []
output = []
links.each {|url| 
	if url[0].nil?
		domain = url[1].match(/https?:\/\/([^\/]+)/)
		parts = domain[1].split('.')
		name = case parts.length
			when 1: parts[0]
			when 2: parts[0]
			else parts[1]
		end
	else
		name = url[0]
	end
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'title' =&gt; name, 'link' =&gt; url[1] }
	norepeat.push name
}
output = output.sort {|a,b| a['title'] &lt;=&gt; b['title']}
counter = 0
output.each { |x| 
	counter += 1
	puts "[${#{counter}:#{x['title']}}]: #{x['link']}" 
}

end</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^@w</string>
	<key>name</key>
	<string>Paste Reference List (Markdown)</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html.markdown.multimarkdown, text.html.markdown</string>
	<key>tabTrigger</key>
	<string>refs</string>
	<key>uuid</key>
	<string>CA4A6B09-DF43-46E3-A6B9-28C163178DBD</string>
</dict>
</plist>
