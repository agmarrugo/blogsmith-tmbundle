<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/ui'
require SUPPORT + '/lib/osx/plist'
require SUPPORT + '/lib/exit_codes'
require 'erb'
require 'net/http'
require 'open-uri'

phrase = STDIN.read


def do_search(keyword)
  useragent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.1) Gecko/20060111 Firefox/1.5.0.1'
  http = Net::HTTP.new('appspace.com')
  path = "/apps/find/#{e_url(keyword.strip)}/"
  headers = {
    'Referer' =&gt; 'http://appspace.com/',
    'Content-Type' =&gt; 'application/x-www-form-urlencoded',
    'User-Agent' =&gt; useragent
  }

  resp, data = http.post(path, data, headers)
#  data = Net::HTTP.get_response(URI.parse(escapedUrl)).body  
  res = data.split("\n")
  res
end

keyword = phrase.empty? ? TextMate.exit_discard : phrase
res = do_search(keyword)
completions = []
res.each { |var|
	completions &lt;&lt; { 
		'display' =&gt; var
	}
}

TextMate::UI.complete(completions, :case_insensitive =&gt; true, :initial_filter =&gt; ENV['TM_CURRENT_WORD'], :extra_chars =&gt; ' ')

# options = {:case_insensitive =&gt; true}
# res[TextMate::UI.complete(completions,options)]

# selected = completions[TextMate::UI.menu(completions)] rescue exit
# print selected.sub(/\A#{Regexp.escape(ENV['TM_CURRENT_WORD'].to_s)}/, "")</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string></string>
	<key>name</key>
	<string>Complete App Name</string>
	<key>output</key>
	<string>afterSelectedText</string>
	<key>scope</key>
	<string>text.html.markdown.multimarkdown, text.html.markdown</string>
	<key>uuid</key>
	<string>B9EF458E-6832-4DB1-98CA-87FA186E1EE8</string>
</dict>
</plist>
